#!/bin/bash

declare -A board

clear=no

boardRows=4
boardColumns=4

function initBoard() {
	for i in $(seq 1 $boardRows); do
		for j in $(seq 1 $boardColumns); do
			board[$i,$j]=" "
		done
	done
	for p in $(seq 1 2); do
		# FIXME: Same values of x and y in second iteration.
		local x=$(($RANDOM % $boardColumns + 1))
		local y=$(($RANDOM % $boardRows + 1))
		local n=$(randValue)
		board[$x,$y]=$n
	done
}

function readKey() {
	read -sN1 key
	read -sN1 -t 0.0001 k1
	read -sN1 -t 0.0001 k2
	read -sN1 -t 0.0001 k3
	key+=${k1}${k2}${k3}
	case "$key" in
		$'\e[A')
			echo '↑';
		;;
		$'\e[B')
			echo '↓';
		;;
		$'\e[C')
			echo '→';
		;;
		$'\e[D')
			echo "←";
		;;
		*)
			echo $key
		;;
	esac
}

function moveVertically() {
	local col=$1
	local direction=$2
	if [ $direction == 1 ]; then
		local start=1
		local end=$boardRows
	elif [ $direction == -1 ]; then
		local start=$boardRows
		local end=1
	else
		echo "FATAL(moveVertically): Invalid direction: $direction" 1>&2
		exit 1
	fi
	local moveCount=0
	for i in $(seq $start $direction $end); do
		if [ "${board[$i,$col]}" != " " ]; then
			local next=$(($i - $direction))
			while [ "${board[$next,$col]}" == " " ]; do
				board[$next,$col]=${board[$(($next + $direction)),$col]}
				board[$(($next + $direction)),$col]=" "
				next=$(($next - $direction))
				moveCount=$(($moveCount+1))
			done
		fi
	done
	return $moveCount
}

function sumVertically() {
	local col=$1
	local direction=$2
	if [ $direction == 1 ]; then
		local start=1
		local end=$boardRows
	elif [ $direction == -1 ]; then
		local start=$boardRows
		local end=1
	else
		echo "FATAL(sumVertically): Invalid direction: $direction" 1>&2
		exit 1
	fi
	local moveCount=0
	for j in $(seq $start $direction $end); do
		if [ "${board[$j,$col]}" != " " -a $(($j + $direction)) -lt $(($start + $end)) -a "${board[$(($j + $direction)),$col]}" == "${board[$j,$col]}" ]; then
			board[$j,$col]=$((${board[$j,$col]} + ${board[$(($j + $direction)),$col]}))
			board[$(($j + $direction)),$col]=" "
			moveCount=$(($moveCount+1))
		fi
	done
	return $moveCount
}

function moveUp() {
	local steps=0
	for theColumn in $(seq 1 $boardColumns); do
		moveVertically $theColumn 1
		steps=$(($steps+$?))
		sumVertically $theColumn 1
		steps=$(($steps+$?))
		moveVertically $theColumn 1
		steps=$(($steps+$?))
	done
	return $steps
}

function moveDown() {
	local steps=0
	for theColumn in $(seq 1 $boardColumns); do
		moveVertically $theColumn -1
		steps=$(($steps+$?))
		sumVertically $theColumn -1
		steps=$(($steps+$?))
		moveVertically $theColumn -1
		steps=$(($steps+$?))
	done
	return $steps
}

function moveHorizontally() {
	local row=$1
	local direction=$2
	if [ $direction == 1 ]; then
		local start=1
		local end=$boardColumns
	elif [ $direction == -1 ]; then
		local start=$boardColumns
		local end=1
	else
		echo "FATAL(moveHorizontally): Invalid direction: $direction" 1>&2
		exit 1
	fi
	local moveCount=0
	for j in $(seq $start $direction $end); do
		if [ "${board[$row,$j]}" != " " ]; then
			local next=$(($j - $direction))
			while [ "${board[$row,$next]}" == " " ]; do
				board[$row,$next]=${board[$row,$(($next + $direction))]}
				board[$row,$(($next + $direction))]=" "
				next=$(($next - $direction))
				moveCount=$(($moveCount+1))
			done
		fi
	done
	return $moveCount
}

function sumHorizontally() {
	local row=$1
	local direction=$2
	if [ $direction == 1 ]; then
		local start=1
		local end=$boardColumns
	elif [ $direction == -1 ]; then
		local start=$boardColumns
		local end=1
	else
		echo "FATAL(sumHorizontally): Invalid direction: $direction" 1>&2
		exit 1
	fi
	local moveCount=0
	for j in $(seq $start $direction $end); do
		if [ "${board[$row,$j]}" != " " -a $(($j + $direction)) -lt $(($start + $end)) -a "${board[$row,$(($j + $direction))]}" == "${board[$row,$j]}" ]; then
			board[$row,$j]=$((${board[$row,$j]} + ${board[$row,$(($j + $direction))]}))
			board[$row,$(($j + $direction))]=" "
			moveCount=$(($moveCount+1))
		fi
	done
	return $moveCount
}

function moveRight() {
	local steps=0
	for theRow in $(seq 1 $boardRows); do
		moveHorizontally $theRow -1
		steps=$(($steps+$?))
		sumHorizontally $theRow -1
		steps=$(($steps+$?))
		moveHorizontally $theRow -1
		steps=$(($steps+$?))
	done
	return $steps
}

function moveLeft() {
	local steps=0
	for theRow in $(seq 1 $boardRows); do
		moveHorizontally $theRow 1
		steps=$(($steps+$?))
		sumHorizontally $theRow 1
		steps=$(($steps+$?))
		moveHorizontally $theRow 1
		steps=$(($steps+$?))
	done
	return $steps
}

function newBoardRandomValue() {
	local x=$(($RANDOM % $boardColumns + 1))
	local y=$(($RANDOM % $boardRows + 1))
	while [ "${board[$x,$y]}" != " " ]; do
		# FIXME: This could be an infinite loop.
		local x=$(($RANDOM % $boardColumns + 1))
		local y=$(($RANDOM % $boardRows + 1))
	done
	board[$x,$y]=$(randValue)
}

function checkNoMoreMoves() {
	:
}

function showCLIHelp() {
	echo "2048 Game written in BASH"
	echo "Diego Lago González <diego.lago.gonzalez@gmail.com>"
	echo "Usage: $(basename $0) [options]"
	echo "Options:"
	echo " -c   Clear the screen."
	echo " -h   Show this help and exit."
	echo
	echo "During game:"
	showHelp nocredits
	exit 1
}

function showHelp() {
	if [ -z "$1" ]; then
		echo
		echo "2048 Game written in BASH"
		echo "Diego Lago González <diego.lago.gonzalez@gmail.com>"
	fi
	echo
	echo "Keys:"
	echo "Use arrow keys to move numbers."
	echo "Use 'n' to create a new game."
	echo "Use 'q' to quit."
	echo "Use 'h' to show this help."
	if [ -z "$1" ]; then
		echo
		read -n 1 -p "Press any key to continue..."
	fi
}

function processKey() {
	case "$1" in
		"↑")
			moveUp
			return $?
		;;
		"↓")
			moveDown
			return $?
		;;
		"→")
			moveRight
			return $?
		;;
		"←")
			moveLeft
			return $?
		;;
		"n")
			initBoard
		;;
		"h")
			showHelp
		;;
		"q")
			exit 1
		;;
	esac
}

function randValue() {
	# Should return 2 or 4 (more probability to 2's than 4's).
	echo 2
}

function printBoard() {
	if [ "$clear" == "yes" ]; then
		clear
	fi
	echo "-----------------------------"
	for i in $(seq 1 $boardRows); do
		echo -n "|"
		for j in $(seq 1 $boardColumns); do
			printf " %4s " ${board[$i,$j]}
			echo -n "|"
		done
		echo -e "\n-----------------------------"
	done
}

function processOptions() {
	while getopts ":ch" opt; do
		case "$opt" in
			c)
				clear=yes
			;;
			h)
				showCLIHelp
			;;
		esac
	done
}

function main() {
	processOptions $@
	initBoard
	while true; do
		printBoard
		key=$(readKey)
		processKey $key
		local result=$?
		if [ $result -ne 0 ]; then
			newBoardRandomValue
		fi
		checkNoMoreMoves
	done
}

main $@
